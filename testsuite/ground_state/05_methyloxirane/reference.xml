<?xml version="1.0" encoding="UTF-8"?>
<!--

                   ___________________________
                   |                         |
                   | qball alsos             |
                   |                         |
                   |                         |
                   |                         |
                   |                         |
                   |                         |
                   |                         |
                   |                         |
                   |                         |
                   |      Lawrence Livermore |
                   |     National Laboratory |
                   |                         |
                   | Copyright (c) 2003-2016 |
                   |_________________________|

-->
<qbox:simulation xmlns:qbox="http://www.quantum-simulation.org/ns/fpmd/fpmd-1.0">
<release> qball alsos </release>
<npes> 4 </npes>
<nthreads> 1 </nthreads>
<user> xavier </user>
<sysname> Linux </sysname>
<nodename> refri </nodename>
<start_time> 2018-05-18T01:44:27Z </start_time>
<!-- [qball] species collection sg15 -->
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ag_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ag -->
  <!-- SpeciesReader::readSpecies: read atomic_number 47 -->
  <!-- SpeciesReader::readSpecies: read mass 107.868 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 19 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Ag:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ag:
 name_ = Ag
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ag_ONCV_PBE-1.0.upf
 symbol_ = Ag
 atomic_number_ = 47
 Kleinman-Bylander potential
 valence charge = 19 / ionic mass_ = 107.868 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Al_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90022 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Al -->
  <!-- SpeciesReader::readSpecies: read atomic_number 13 -->
  <!-- SpeciesReader::readSpecies: read mass 26.9815 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 11 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Al:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Al:
 name_ = Al
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Al_ONCV_PBE-1.0.upf
 symbol_ = Al
 atomic_number_ = 13
 Kleinman-Bylander potential
 valence charge = 11 / ionic mass_ = 26.9815 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ar_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90022 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ar -->
  <!-- SpeciesReader::readSpecies: read atomic_number 18 -->
  <!-- SpeciesReader::readSpecies: read mass 39.9481 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 8 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Ar:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ar:
 name_ = Ar
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ar_ONCV_PBE-1.1.upf
 symbol_ = Ar
 atomic_number_ = 18
 Kleinman-Bylander potential
 valence charge = 8 / ionic mass_ = 39.9481 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//As_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115357 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol As -->
  <!-- SpeciesReader::readSpecies: read atomic_number 33 -->
  <!-- SpeciesReader::readSpecies: read mass 74.9216 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 5 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species As:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species As:
 name_ = As
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//As_ONCV_PBE-1.1.upf
 symbol_ = As
 atomic_number_ = 33
 Kleinman-Bylander potential
 valence charge = 5 / ionic mass_ = 74.9216 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Au_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Au -->
  <!-- SpeciesReader::readSpecies: read atomic_number 79 -->
  <!-- SpeciesReader::readSpecies: read mass 196.967 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 19 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Au:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Au:
 name_ = Au
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Au_ONCV_PBE-1.0.upf
 symbol_ = Au
 atomic_number_ = 79
 Kleinman-Bylander potential
 valence charge = 19 / ionic mass_ = 196.967 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//B_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89983 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol B -->
  <!-- SpeciesReader::readSpecies: read atomic_number 5 -->
  <!-- SpeciesReader::readSpecies: read mass 10.806 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 3 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species B:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species B:
 name_ = B
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//B_ONCV_PBE-1.0.upf
 symbol_ = B
 atomic_number_ = 5
 Kleinman-Bylander potential
 valence charge = 3 / ionic mass_ = 10.806 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ba_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140892 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ba -->
  <!-- SpeciesReader::readSpecies: read atomic_number 56 -->
  <!-- SpeciesReader::readSpecies: read mass 137.328 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 10 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Ba:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ba:
 name_ = Ba
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ba_ONCV_PBE-1.0.upf
 symbol_ = Ba
 atomic_number_ = 56
 Kleinman-Bylander potential
 valence charge = 10 / ionic mass_ = 137.328 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Be_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89965 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Be -->
  <!-- SpeciesReader::readSpecies: read atomic_number 4 -->
  <!-- SpeciesReader::readSpecies: read mass 9.01218 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 4 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Be:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Be:
 name_ = Be
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Be_ONCV_PBE-1.0.upf
 symbol_ = Be
 atomic_number_ = 4
 Kleinman-Bylander potential
 valence charge = 4 / ionic mass_ = 9.01218 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Bi_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140930 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Bi -->
  <!-- SpeciesReader::readSpecies: read atomic_number 83 -->
  <!-- SpeciesReader::readSpecies: read mass 208.98 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 15 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Bi:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Bi:
 name_ = Bi
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Bi_ONCV_PBE-1.0.upf
 symbol_ = Bi
 atomic_number_ = 83
 Kleinman-Bylander potential
 valence charge = 15 / ionic mass_ = 208.98 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Br_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115357 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Br -->
  <!-- SpeciesReader::readSpecies: read atomic_number 35 -->
  <!-- SpeciesReader::readSpecies: read mass 79.901 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 7 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Br:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Br:
 name_ = Br
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Br_ONCV_PBE-1.0.upf
 symbol_ = Br
 atomic_number_ = 35
 Kleinman-Bylander potential
 valence charge = 7 / ionic mass_ = 79.901 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//C_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89983 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol C -->
  <!-- SpeciesReader::readSpecies: read atomic_number 6 -->
  <!-- SpeciesReader::readSpecies: read mass 12.0096 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 4 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species C:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species C:
 name_ = C
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//C_ONCV_PBE-1.0.upf
 symbol_ = C
 atomic_number_ = 6
 Kleinman-Bylander potential
 valence charge = 4 / ionic mass_ = 12.0096 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ca_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115319 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ca -->
  <!-- SpeciesReader::readSpecies: read atomic_number 20 -->
  <!-- SpeciesReader::readSpecies: read mass 40.0784 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 10 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Ca:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ca:
 name_ = Ca
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ca_ONCV_PBE-1.0.upf
 symbol_ = Ca
 atomic_number_ = 20
 Kleinman-Bylander potential
 valence charge = 10 / ionic mass_ = 40.0784 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cd_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Cd -->
  <!-- SpeciesReader::readSpecies: read atomic_number 48 -->
  <!-- SpeciesReader::readSpecies: read mass 112.414 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 20 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Cd:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Cd:
 name_ = Cd
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cd_ONCV_PBE-1.0.upf
 symbol_ = Cd
 atomic_number_ = 48
 Kleinman-Bylander potential
 valence charge = 20 / ionic mass_ = 112.414 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cl_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90022 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Cl -->
  <!-- SpeciesReader::readSpecies: read atomic_number 17 -->
  <!-- SpeciesReader::readSpecies: read mass 35.446 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 7 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Cl:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Cl:
 name_ = Cl
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cl_ONCV_PBE-1.1.upf
 symbol_ = Cl
 atomic_number_ = 17
 Kleinman-Bylander potential
 valence charge = 7 / ionic mass_ = 35.446 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Co_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Co -->
  <!-- SpeciesReader::readSpecies: read atomic_number 27 -->
  <!-- SpeciesReader::readSpecies: read mass 58.9332 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 17 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Co:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Co:
 name_ = Co
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Co_ONCV_PBE-1.0.upf
 symbol_ = Co
 atomic_number_ = 27
 Kleinman-Bylander potential
 valence charge = 17 / ionic mass_ = 58.9332 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cr_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Cr -->
  <!-- SpeciesReader::readSpecies: read atomic_number 24 -->
  <!-- SpeciesReader::readSpecies: read mass 51.9962 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 14 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Cr:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Cr:
 name_ = Cr
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cr_ONCV_PBE-1.0.upf
 symbol_ = Cr
 atomic_number_ = 24
 Kleinman-Bylander potential
 valence charge = 14 / ionic mass_ = 51.9962 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cs_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115433 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Cs -->
  <!-- SpeciesReader::readSpecies: read atomic_number 55 -->
  <!-- SpeciesReader::readSpecies: read mass 132.905 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 9 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Cs:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Cs:
 name_ = Cs
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cs_ONCV_PBE-1.1.upf
 symbol_ = Cs
 atomic_number_ = 55
 Kleinman-Bylander potential
 valence charge = 9 / ionic mass_ = 132.905 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cu_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Cu -->
  <!-- SpeciesReader::readSpecies: read atomic_number 96 -->
  <!-- SpeciesReader::readSpecies: read mass 247 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 19 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Cu:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Cu:
 name_ = Cu
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Cu_ONCV_PBE-1.0.upf
 symbol_ = Cu
 atomic_number_ = 96
 Kleinman-Bylander potential
 valence charge = 19 / ionic mass_ = 247 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//F_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89983 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol F -->
  <!-- SpeciesReader::readSpecies: read atomic_number 9 -->
  <!-- SpeciesReader::readSpecies: read mass 18.9984 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 7 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species F:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species F:
 name_ = F
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//F_ONCV_PBE-1.0.upf
 symbol_ = F
 atomic_number_ = 9
 Kleinman-Bylander potential
 valence charge = 7 / ionic mass_ = 18.9984 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Fe_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Fe -->
  <!-- SpeciesReader::readSpecies: read atomic_number 26 -->
  <!-- SpeciesReader::readSpecies: read mass 55.8452 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 16 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Fe:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Fe:
 name_ = Fe
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Fe_ONCV_PBE-1.0.upf
 symbol_ = Fe
 atomic_number_ = 26
 Kleinman-Bylander potential
 valence charge = 16 / ionic mass_ = 55.8452 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ga_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115357 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ga -->
  <!-- SpeciesReader::readSpecies: read atomic_number 31 -->
  <!-- SpeciesReader::readSpecies: read mass 69.7231 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 13 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Ga:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ga:
 name_ = Ga
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ga_ONCV_PBE-1.0.upf
 symbol_ = Ga
 atomic_number_ = 31
 Kleinman-Bylander potential
 valence charge = 13 / ionic mass_ = 69.7231 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ge_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115357 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ge -->
  <!-- SpeciesReader::readSpecies: read atomic_number 32 -->
  <!-- SpeciesReader::readSpecies: read mass 72.6308 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 14 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Ge:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ge:
 name_ = Ge
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ge_ONCV_PBE-1.0.upf
 symbol_ = Ge
 atomic_number_ = 32
 Kleinman-Bylander potential
 valence charge = 14 / ionic mass_ = 72.6308 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//H_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   64829 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol H -->
  <!-- SpeciesReader::readSpecies: read atomic_number 1 -->
  <!-- SpeciesReader::readSpecies: read mass 1.00784 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 1 -->
  <!-- SpeciesReader::readSpecies: read lmax 0 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
<!-- Species H:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species H:
 name_ = H
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//H_ONCV_PBE-1.0.upf
 symbol_ = H
 atomic_number_ = 1
 local potential
 valence charge = 1 / ionic mass_ = 1.00784 (amu)
 lmax_ =   0
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//He_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   64830 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol He -->
  <!-- SpeciesReader::readSpecies: read atomic_number 2 -->
  <!-- SpeciesReader::readSpecies: read mass 4.0026 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 2 -->
  <!-- SpeciesReader::readSpecies: read lmax 0 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
<!-- Species He:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species He:
 name_ = He
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//He_ONCV_PBE-1.0.upf
 symbol_ = He
 atomic_number_ = 2
 local potential
 valence charge = 2 / ionic mass_ = 4.0026 (amu)
 lmax_ =   0
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Hf_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Hf -->
  <!-- SpeciesReader::readSpecies: read atomic_number 72 -->
  <!-- SpeciesReader::readSpecies: read mass 178.492 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 26 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Hf:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Hf:
 name_ = Hf
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Hf_ONCV_PBE-1.0.upf
 symbol_ = Hf
 atomic_number_ = 72
 Kleinman-Bylander potential
 valence charge = 26 / ionic mass_ = 178.492 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Hg_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Hg -->
  <!-- SpeciesReader::readSpecies: read atomic_number 80 -->
  <!-- SpeciesReader::readSpecies: read mass 200.592 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 20 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Hg:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Hg:
 name_ = Hg
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Hg_ONCV_PBE-1.0.upf
 symbol_ = Hg
 atomic_number_ = 80
 Kleinman-Bylander potential
 valence charge = 20 / ionic mass_ = 200.592 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//I_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115413 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol I -->
  <!-- SpeciesReader::readSpecies: read atomic_number 53 -->
  <!-- SpeciesReader::readSpecies: read mass 126.904 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 17 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species I:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species I:
 name_ = I
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//I_ONCV_PBE-1.1.upf
 symbol_ = I
 atomic_number_ = 53
 Kleinman-Bylander potential
 valence charge = 17 / ionic mass_ = 126.904 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//In_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115414 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol In -->
  <!-- SpeciesReader::readSpecies: read atomic_number 49 -->
  <!-- SpeciesReader::readSpecies: read mass 114.818 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 13 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species In:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species In:
 name_ = In
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//In_ONCV_PBE-1.1.upf
 symbol_ = In
 atomic_number_ = 49
 Kleinman-Bylander potential
 valence charge = 13 / ionic mass_ = 114.818 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ir_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ir -->
  <!-- SpeciesReader::readSpecies: read atomic_number 77 -->
  <!-- SpeciesReader::readSpecies: read mass 192.217 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 17 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Ir:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ir:
 name_ = Ir
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ir_ONCV_PBE-1.0.upf
 symbol_ = Ir
 atomic_number_ = 77
 Kleinman-Bylander potential
 valence charge = 17 / ionic mass_ = 192.217 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//K_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115318 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol K -->
  <!-- SpeciesReader::readSpecies: read atomic_number 19 -->
  <!-- SpeciesReader::readSpecies: read mass 39.0983 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 9 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species K:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species K:
 name_ = K
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//K_ONCV_PBE-1.0.upf
 symbol_ = K
 atomic_number_ = 19
 Kleinman-Bylander potential
 valence charge = 9 / ionic mass_ = 39.0983 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Kr_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115357 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Kr -->
  <!-- SpeciesReader::readSpecies: read atomic_number 36 -->
  <!-- SpeciesReader::readSpecies: read mass 83.7982 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 8 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Kr:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Kr:
 name_ = Kr
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Kr_ONCV_PBE-1.0.upf
 symbol_ = Kr
 atomic_number_ = 36
 Kleinman-Bylander potential
 valence charge = 8 / ionic mass_ = 83.7982 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//La_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140892 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol La -->
  <!-- SpeciesReader::readSpecies: read atomic_number 57 -->
  <!-- SpeciesReader::readSpecies: read mass 138.905 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 11 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species La:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species La:
 name_ = La
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//La_ONCV_PBE-1.0.upf
 symbol_ = La
 atomic_number_ = 57
 Kleinman-Bylander potential
 valence charge = 11 / ionic mass_ = 138.905 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Li_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89965 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Li -->
  <!-- SpeciesReader::readSpecies: read atomic_number 3 -->
  <!-- SpeciesReader::readSpecies: read mass 6.938 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 3 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Li:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Li:
 name_ = Li
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Li_ONCV_PBE-1.0.upf
 symbol_ = Li
 atomic_number_ = 3
 Kleinman-Bylander potential
 valence charge = 3 / ionic mass_ = 6.938 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Mg_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90003 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Mg -->
  <!-- SpeciesReader::readSpecies: read atomic_number 12 -->
  <!-- SpeciesReader::readSpecies: read mass 24.304 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 10 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Mg:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Mg:
 name_ = Mg
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Mg_ONCV_PBE-1.0.upf
 symbol_ = Mg
 atomic_number_ = 12
 Kleinman-Bylander potential
 valence charge = 10 / ionic mass_ = 24.304 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Mn_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Mn -->
  <!-- SpeciesReader::readSpecies: read atomic_number 25 -->
  <!-- SpeciesReader::readSpecies: read mass 54.938 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 15 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Mn:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Mn:
 name_ = Mn
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Mn_ONCV_PBE-1.0.upf
 symbol_ = Mn
 atomic_number_ = 25
 Kleinman-Bylander potential
 valence charge = 15 / ionic mass_ = 54.938 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Mo_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Mo -->
  <!-- SpeciesReader::readSpecies: read atomic_number 42 -->
  <!-- SpeciesReader::readSpecies: read mass 95.951 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 14 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Mo:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Mo:
 name_ = Mo
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Mo_ONCV_PBE-1.0.upf
 symbol_ = Mo
 atomic_number_ = 42
 Kleinman-Bylander potential
 valence charge = 14 / ionic mass_ = 95.951 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//N_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89983 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol N -->
  <!-- SpeciesReader::readSpecies: read atomic_number 7 -->
  <!-- SpeciesReader::readSpecies: read mass 14.0064 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 5 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species N:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species N:
 name_ = N
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//N_ONCV_PBE-1.0.upf
 symbol_ = N
 atomic_number_ = 7
 Kleinman-Bylander potential
 valence charge = 5 / ionic mass_ = 14.0064 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Na_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90003 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Na -->
  <!-- SpeciesReader::readSpecies: read atomic_number 11 -->
  <!-- SpeciesReader::readSpecies: read mass 22.9898 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 9 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Na:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Na:
 name_ = Na
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Na_ONCV_PBE-1.0.upf
 symbol_ = Na
 atomic_number_ = 11
 Kleinman-Bylander potential
 valence charge = 9 / ionic mass_ = 22.9898 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Nb_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Nb -->
  <!-- SpeciesReader::readSpecies: read atomic_number 41 -->
  <!-- SpeciesReader::readSpecies: read mass 92.9064 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 13 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Nb:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Nb:
 name_ = Nb
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Nb_ONCV_PBE-1.0.upf
 symbol_ = Nb
 atomic_number_ = 41
 Kleinman-Bylander potential
 valence charge = 13 / ionic mass_ = 92.9064 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ne_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89984 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ne -->
  <!-- SpeciesReader::readSpecies: read atomic_number 10 -->
  <!-- SpeciesReader::readSpecies: read mass 20.1798 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 8 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Ne:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ne:
 name_ = Ne
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ne_ONCV_PBE-1.0.upf
 symbol_ = Ne
 atomic_number_ = 10
 Kleinman-Bylander potential
 valence charge = 8 / ionic mass_ = 20.1798 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ni_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ni -->
  <!-- SpeciesReader::readSpecies: read atomic_number 28 -->
  <!-- SpeciesReader::readSpecies: read mass 58.6934 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 18 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Ni:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ni:
 name_ = Ni
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ni_ONCV_PBE-1.0.upf
 symbol_ = Ni
 atomic_number_ = 28
 Kleinman-Bylander potential
 valence charge = 18 / ionic mass_ = 58.6934 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//O_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   89983 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol O -->
  <!-- SpeciesReader::readSpecies: read atomic_number 8 -->
  <!-- SpeciesReader::readSpecies: read mass 15.999 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 6 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species O:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species O:
 name_ = O
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//O_ONCV_PBE-1.0.upf
 symbol_ = O
 atomic_number_ = 8
 Kleinman-Bylander potential
 valence charge = 6 / ionic mass_ = 15.999 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Os_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Os -->
  <!-- SpeciesReader::readSpecies: read atomic_number 76 -->
  <!-- SpeciesReader::readSpecies: read mass 190.233 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 16 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Os:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Os:
 name_ = Os
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Os_ONCV_PBE-1.0.upf
 symbol_ = Os
 atomic_number_ = 76
 Kleinman-Bylander potential
 valence charge = 16 / ionic mass_ = 190.233 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//P_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90021 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol P -->
  <!-- SpeciesReader::readSpecies: read atomic_number 15 -->
  <!-- SpeciesReader::readSpecies: read mass 30.9738 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 5 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species P:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species P:
 name_ = P
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//P_ONCV_PBE-1.1.upf
 symbol_ = P
 atomic_number_ = 15
 Kleinman-Bylander potential
 valence charge = 5 / ionic mass_ = 30.9738 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Pb_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140930 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Pb -->
  <!-- SpeciesReader::readSpecies: read atomic_number 82 -->
  <!-- SpeciesReader::readSpecies: read mass 207.21 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 14 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Pb:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Pb:
 name_ = Pb
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Pb_ONCV_PBE-1.0.upf
 symbol_ = Pb
 atomic_number_ = 82
 Kleinman-Bylander potential
 valence charge = 14 / ionic mass_ = 207.21 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Pd_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Pd -->
  <!-- SpeciesReader::readSpecies: read atomic_number 46 -->
  <!-- SpeciesReader::readSpecies: read mass 106.421 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 18 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Pd:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Pd:
 name_ = Pd
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Pd_ONCV_PBE-1.0.upf
 symbol_ = Pd
 atomic_number_ = 46
 Kleinman-Bylander potential
 valence charge = 18 / ionic mass_ = 106.421 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Pt_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Pt -->
  <!-- SpeciesReader::readSpecies: read atomic_number 78 -->
  <!-- SpeciesReader::readSpecies: read mass 195.085 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 18 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Pt:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Pt:
 name_ = Pt
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Pt_ONCV_PBE-1.0.upf
 symbol_ = Pt
 atomic_number_ = 78
 Kleinman-Bylander potential
 valence charge = 18 / ionic mass_ = 195.085 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Rb_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115376 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Rb -->
  <!-- SpeciesReader::readSpecies: read atomic_number 37 -->
  <!-- SpeciesReader::readSpecies: read mass 85.4678 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 9 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Rb:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Rb:
 name_ = Rb
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Rb_ONCV_PBE-1.0.upf
 symbol_ = Rb
 atomic_number_ = 37
 Kleinman-Bylander potential
 valence charge = 9 / ionic mass_ = 85.4678 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Re_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Re -->
  <!-- SpeciesReader::readSpecies: read atomic_number 75 -->
  <!-- SpeciesReader::readSpecies: read mass 186.207 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 15 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Re:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Re:
 name_ = Re
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Re_ONCV_PBE-1.0.upf
 symbol_ = Re
 atomic_number_ = 75
 Kleinman-Bylander potential
 valence charge = 15 / ionic mass_ = 186.207 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Rh_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Rh -->
  <!-- SpeciesReader::readSpecies: read atomic_number 45 -->
  <!-- SpeciesReader::readSpecies: read mass 102.906 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 17 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Rh:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Rh:
 name_ = Rh
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Rh_ONCV_PBE-1.0.upf
 symbol_ = Rh
 atomic_number_ = 45
 Kleinman-Bylander potential
 valence charge = 17 / ionic mass_ = 102.906 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ru_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ru -->
  <!-- SpeciesReader::readSpecies: read atomic_number 44 -->
  <!-- SpeciesReader::readSpecies: read mass 101.072 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 16 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Ru:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ru:
 name_ = Ru
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ru_ONCV_PBE-1.0.upf
 symbol_ = Ru
 atomic_number_ = 44
 Kleinman-Bylander potential
 valence charge = 16 / ionic mass_ = 101.072 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//S_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90021 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol S -->
  <!-- SpeciesReader::readSpecies: read atomic_number 16 -->
  <!-- SpeciesReader::readSpecies: read mass 32.059 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 6 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species S:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species S:
 name_ = S
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//S_ONCV_PBE-1.1.upf
 symbol_ = S
 atomic_number_ = 16
 Kleinman-Bylander potential
 valence charge = 6 / ionic mass_ = 32.059 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sb_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115414 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Sb -->
  <!-- SpeciesReader::readSpecies: read atomic_number 51 -->
  <!-- SpeciesReader::readSpecies: read mass 121.76 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 15 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Sb:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Sb:
 name_ = Sb
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sb_ONCV_PBE-1.1.upf
 symbol_ = Sb
 atomic_number_ = 51
 Kleinman-Bylander potential
 valence charge = 15 / ionic mass_ = 121.76 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sc_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Sc -->
  <!-- SpeciesReader::readSpecies: read atomic_number 21 -->
  <!-- SpeciesReader::readSpecies: read mass 44.9559 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 11 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Sc:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Sc:
 name_ = Sc
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sc_ONCV_PBE-1.0.upf
 symbol_ = Sc
 atomic_number_ = 21
 Kleinman-Bylander potential
 valence charge = 11 / ionic mass_ = 44.9559 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Se_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115357 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Se -->
  <!-- SpeciesReader::readSpecies: read atomic_number 34 -->
  <!-- SpeciesReader::readSpecies: read mass 78.9718 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 6 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Se:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Se:
 name_ = Se
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Se_ONCV_PBE-1.1.upf
 symbol_ = Se
 atomic_number_ = 34
 Kleinman-Bylander potential
 valence charge = 6 / ionic mass_ = 78.9718 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Si_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   90022 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Si -->
  <!-- SpeciesReader::readSpecies: read atomic_number 14 -->
  <!-- SpeciesReader::readSpecies: read mass 28.084 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 4 -->
  <!-- SpeciesReader::readSpecies: read lmax 1 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
<!-- Species Si:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Si:
 name_ = Si
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Si_ONCV_PBE-1.1.upf
 symbol_ = Si
 atomic_number_ = 14
 Kleinman-Bylander potential
 valence charge = 4 / ionic mass_ = 28.084 (amu)
 lmax_ =   1
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sn_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115414 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Sn -->
  <!-- SpeciesReader::readSpecies: read atomic_number 50 -->
  <!-- SpeciesReader::readSpecies: read mass 118.711 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 14 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Sn:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Sn:
 name_ = Sn
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sn_ONCV_PBE-1.1.upf
 symbol_ = Sn
 atomic_number_ = 50
 Kleinman-Bylander potential
 valence charge = 14 / ionic mass_ = 118.711 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sr_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115376 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Sr -->
  <!-- SpeciesReader::readSpecies: read atomic_number 38 -->
  <!-- SpeciesReader::readSpecies: read mass 87.621 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 10 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Sr:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Sr:
 name_ = Sr
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Sr_ONCV_PBE-1.0.upf
 symbol_ = Sr
 atomic_number_ = 38
 Kleinman-Bylander potential
 valence charge = 10 / ionic mass_ = 87.621 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ta_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140911 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ta -->
  <!-- SpeciesReader::readSpecies: read atomic_number 73 -->
  <!-- SpeciesReader::readSpecies: read mass 180.948 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 27 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Ta:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ta:
 name_ = Ta
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ta_ONCV_PBE-1.0.upf
 symbol_ = Ta
 atomic_number_ = 73
 Kleinman-Bylander potential
 valence charge = 27 / ionic mass_ = 180.948 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Tc_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Tc -->
  <!-- SpeciesReader::readSpecies: read atomic_number 43 -->
  <!-- SpeciesReader::readSpecies: read mass 98 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 15 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Tc:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Tc:
 name_ = Tc
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Tc_ONCV_PBE-1.0.upf
 symbol_ = Tc
 atomic_number_ = 43
 Kleinman-Bylander potential
 valence charge = 15 / ionic mass_ = 98 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Te_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115414 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Te -->
  <!-- SpeciesReader::readSpecies: read atomic_number 52 -->
  <!-- SpeciesReader::readSpecies: read mass 127.603 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 16 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Te:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Te:
 name_ = Te
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Te_ONCV_PBE-1.1.upf
 symbol_ = Te
 atomic_number_ = 52
 Kleinman-Bylander potential
 valence charge = 16 / ionic mass_ = 127.603 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ti_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Ti -->
  <!-- SpeciesReader::readSpecies: read atomic_number 22 -->
  <!-- SpeciesReader::readSpecies: read mass 47.8671 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 12 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Ti:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Ti:
 name_ = Ti
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Ti_ONCV_PBE-1.0.upf
 symbol_ = Ti
 atomic_number_ = 22
 Kleinman-Bylander potential
 valence charge = 12 / ionic mass_ = 47.8671 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Tl_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140930 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Tl -->
  <!-- SpeciesReader::readSpecies: read atomic_number 81 -->
  <!-- SpeciesReader::readSpecies: read mass 204.382 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 13 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species Tl:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Tl:
 name_ = Tl
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Tl_ONCV_PBE-1.0.upf
 symbol_ = Tl
 atomic_number_ = 81
 Kleinman-Bylander potential
 valence charge = 13 / ionic mass_ = 204.382 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//V_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115337 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol V -->
  <!-- SpeciesReader::readSpecies: read atomic_number 23 -->
  <!-- SpeciesReader::readSpecies: read mass 50.9415 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 13 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species V:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species V:
 name_ = V
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//V_ONCV_PBE-1.0.upf
 symbol_ = V
 atomic_number_ = 23
 Kleinman-Bylander potential
 valence charge = 13 / ionic mass_ = 50.9415 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//W_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   140910 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol W -->
  <!-- SpeciesReader::readSpecies: read atomic_number 74 -->
  <!-- SpeciesReader::readSpecies: read mass 183.841 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 28 -->
  <!-- SpeciesReader::readSpecies: read lmax 3 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=3 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=3 -->
<!-- Species W:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species W:
 name_ = W
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//W_ONCV_PBE-1.0.upf
 symbol_ = W
 atomic_number_ = 74
 Kleinman-Bylander potential
 valence charge = 28 / ionic mass_ = 183.841 (amu)
 lmax_ =   3
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Xe_ONCV_PBE-1.1.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115414 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Xe -->
  <!-- SpeciesReader::readSpecies: read atomic_number 54 -->
  <!-- SpeciesReader::readSpecies: read mass 131.294 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 18 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Xe:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Xe:
 name_ = Xe
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Xe_ONCV_PBE-1.1.upf
 symbol_ = Xe
 atomic_number_ = 54
 Kleinman-Bylander potential
 valence charge = 18 / ionic mass_ = 131.294 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Y_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115394 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Y -->
  <!-- SpeciesReader::readSpecies: read atomic_number 39 -->
  <!-- SpeciesReader::readSpecies: read mass 88.9058 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 11 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Y:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Y:
 name_ = Y
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Y_ONCV_PBE-1.0.upf
 symbol_ = Y
 atomic_number_ = 39
 Kleinman-Bylander potential
 valence charge = 11 / ionic mass_ = 88.9058 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Zn_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115338 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Zn -->
  <!-- SpeciesReader::readSpecies: read atomic_number 30 -->
  <!-- SpeciesReader::readSpecies: read mass 65.382 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 20 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Zn:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Zn:
 name_ = Zn
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Zn_ONCV_PBE-1.0.upf
 symbol_ = Zn
 atomic_number_ = 30
 Kleinman-Bylander potential
 valence charge = 20 / ionic mass_ = 65.382 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
  <!-- SpeciesCmd: defining species collection as sg15 -->
  <!-- SpeciesReader opening file /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Zr_ONCV_PBE-1.0.upf -->
  <!--   format: UPF2 -->
  <!--   size:   115395 -->
  <!-- SpeciesReader::readSpecies: potential type:  Kleinman-Bylander norm-conserving -->
  <!-- SpeciesReader::readSpecies: read description 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


     -->
  <!-- SpeciesReader::readSpecies: read symbol Zr -->
  <!-- SpeciesReader::readSpecies: read atomic_number 40 -->
  <!-- SpeciesReader::readSpecies: read mass 91.2242 -->
  <!-- SpeciesReader::readSpecies: read valence_charge 12 -->
  <!-- SpeciesReader::readSpecies: read lmax 2 -->
  <!-- SpeciesReader::readSpecies: read llocal -1 -->
  <!-- SpeciesReader::readSpecies: read mesh_spacing 0.01 -->
  <!-- SpeciesReader::readSpecies: read local_potential size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=0 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=1 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=0 size=602 -->
  <!-- SpeciesReader::readSpecies: read projector l=2 i=1 size=602 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=0 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=1 -->
  <!-- SpeciesReader::readSpecies: read d_ij l=2 -->
<!-- Species Zr:  extending grid to rmax = 40 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96, gmax = 314.083, hubbard_l = -1

 species Zr:
 name_ = Zr
 description_ = 

 This pseudopotential file has been produced using the code
 ONCVPSP  (Optimized Norm-Conservinng Vanderbilt PSeudopotential)
 scalar-relativistic version 2.1.1, 03/26/2014 by D. R. Hamann
 The code is available through a link at URL www.mat-simresearch.com.
 Documentation with the package provides a full discription of the
 input data below.


 While it is not required under the terms of the GNU GPL, it is
 suggested that you cite D. R. Hamann, Phys. Rev. B 88, 085117 (2013)
 in any publication using these pseudopotentials.


 Copyright 2015 The Regents of the University of California
 
 This work is licensed under the Creative Commons Attribution-ShareAlike 
 4.0 International License. To view a copy of this license, visit 
 http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to 
 Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 
 This pseudopotential is part of the Schlipf-Gygi norm-conserving 
 pseudopotential library. Its construction parameters were tuned to 
 reproduce materials of a training set with very high accuracy and 
 should be suitable as a general purpose pseudopotential to treat a 
 variety of different compounds. For details of the construction and 
 testing of the pseudopotential please refer to:
 
 [insert reference to paper here]
 
 We kindly ask that you include this reference in all publications 
 associated to this pseudopotential.


    
 uri_ = /home/xavier/share/qball/pseudopotentials/quantum-simulation.org/sg15//Zr_ONCV_PBE-1.0.upf
 symbol_ = Zr
 atomic_number_ = 40
 Kleinman-Bylander potential
 valence charge = 12 / ionic mass_ = 91.2242 (amu)
 lmax_ =   2
 llocal_ = -1
 rcps_ =   1.5
<!-- [qball] coordinates methyloxirane.xyz -->
CoordinateCmd: Adding 10 atoms from coordinate file 'methyloxirane.xyz'.
<!-- [qball]  -->
<!-- [qball] set cell 10 0 0 0 10 0 0 0 10 -->

<WARNING>
Units are missing for the 'cell' variable. Assuming bohr
</WARNING>

  <unitcell>
<unit_cell 
    a="10.00000000  0.00000000   0.00000000  "
    b="0.00000000   10.00000000  0.00000000  "
    c="0.00000000   0.00000000   10.00000000 " />
  </unitcell>
<!-- [qball] set xc PBE -->
<!-- [qball] set ecut 30 rydberg -->
<!-- [qball] set wf_dyn PSDA -->
<!-- [qball] set ecutprec 4 rydberg -->
<!-- [qball] set threshold_scf 1.E-8 10 -->
<!-- [qball]  -->
<!-- [qball] randomize_wf -->
<!-- Randomize_wf:  allocating wavefunction... -->
<!-- Creating SlaterDet context 4x1 from spincontext, ispin = 0 -->
SlaterDet.resize:  new c dimensions = 1412x12   (353x12 blocks, local data size on pe 0 = 353x12) -->
<!-- Updated occupation of wf -->
<!-- [qball]  -->
<!-- [qball] run 0 200 -->
SlaterDet.resize:  new c dimensions = 1412x12   (353x12 blocks, local data size on pe 0 = 353x12) -->
ChargeDensity:  vbasis = 36 36 36, resize to 40 40 40
  <!-- EnergyFunctional: charge density basis: 11060 plane waves, ngloc = 2774 -->
  <!-- EnergyFunctional: np0v,np1v,np2v: 40 40 40 -->
  <!-- EnergyFunctional: vft->np012(): 64000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ag is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Ag:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ag = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Al is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Al:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Al = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ar is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Ar:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ar = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species As is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species As:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species As = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Au is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Au:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Au = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species B is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.05000000 -->
<!-- Species B:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species B = 1.05000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ba is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Ba:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ba = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Be is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.05000000 -->
<!-- Species Be:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Be = 1.05000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Bi is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Bi:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Bi = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Br is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Br:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Br = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species C is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.05000000 -->
<!-- Species C:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species C = 1.05000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ca is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Ca:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ca = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Cd is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Cd:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Cd = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Cl is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Cl:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Cl = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Co is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Co:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Co = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Cr is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Cr:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Cr = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Cs is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Cs:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Cs = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Cu is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Cu:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Cu = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species F is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species F:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species F = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Fe is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Fe:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Fe = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ga is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Ga:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ga = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ge is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Ge:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ge = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species H is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.00000000 -->
<!-- Species H:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species H = 1.00000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species He is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.00000000 -->
<!-- Species He:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species He = 1.00000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Hf is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Hf:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Hf = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Hg is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Hg:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Hg = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species I is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species I:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species I = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species In is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species In:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species In = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ir is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Ir:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ir = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species K is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species K:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species K = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Kr is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Kr:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Kr = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species La is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species La:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species La = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Li is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.05000000 -->
<!-- Species Li:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Li = 1.05000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Mg is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Mg:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Mg = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Mn is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Mn:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Mn = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Mo is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Mo:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Mo = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species N is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species N:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species N = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Na is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Na:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Na = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Nb is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Nb:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Nb = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ne is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Ne:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ne = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ni is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Ni:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ni = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species O is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species O:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species O = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Os is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Os:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Os = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species P is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species P:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species P = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Pb is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Pb:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Pb = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Pd is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Pd:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Pd = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Pt is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Pt:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Pt = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Rb is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Rb:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Rb = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Re is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Re:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Re = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Rh is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Rh:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Rh = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ru is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Ru:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ru = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species S is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species S:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species S = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Sb is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Sb:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Sb = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Sc is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Sc:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Sc = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Se is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Se:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Se = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Si is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.05000000 -->
<!-- Species Si:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Si = 1.05000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Sn is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Sn:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Sn = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Sr is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.10000000 -->
<!-- Species Sr:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Sr = 1.10000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ta is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.20000000 -->
<!-- Species Ta:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ta = 1.20000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Tc is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Tc:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Tc = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Te is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Te:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Te = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Ti is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Ti:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Ti = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Tl is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Tl:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Tl = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species V is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species V:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species V = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species W is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.20000000 -->
<!-- Species W:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species W = 1.20000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Xe is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Xe:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Xe = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Y is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Y:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Y = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Zn is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Zn:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Zn = 1.15000000 -->
<!-- AtomSet.set_rcps:  Ewald width for species Zr is too small for reciprocal sum convergence, increasing rcps from 1.50000000 to 1.15000000 -->
<!-- Species Zr:  extending grid to rmax = 40.00000000 to increase vnlg resolution (4096 pts) -->
SPECIES.ndft = 4096, np = 602, rmax = 40.96000000, gmax = 314.08256632, hubbard_l = -1
<!-- AtomSet.set_rcps:  Ewald width for species Zr = 1.15000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.41421356 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.41421356 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.56204994 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.56204994 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.41421356 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.45000000 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48660687 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.56204994 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.56204994 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52397507 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.48492424 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.52069063 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59452187 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55724115 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.55563492 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62788206 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.59138305 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.69705627 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.69705627 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.69705627 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.66207701 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<!-- EnergyFunctional:  number of images in real-space ewald sum = 0 for rckj = 1.62634560 -->
<run niter_ionic="0" niter_scf="200" niter_nonscf="0">
<wavefunction ecut="15.00000000" nspin="1" nel="24" nempty="0">
<cell a0="10.000000 0.000000 0.000000"
      a1="0.000000 10.000000 0.000000"
      a2="0.000000 0.000000 10.000000"/>
<reciprocal_lattice b0="0.628319 0.000000 0.000000"
      b1="0.000000 0.628319 0.000000"
      b2="0.000000 0.000000 0.628319"/>
<refcell a0="0.000000 0.000000 0.000000"
         a1="0.000000 0.000000 0.000000"
         a2="0.000000 0.000000 0.000000"/>
<slater_determinant kpoint="0.000000 0.000000 0.000000"  weight="1.000000" size="12">
 <!-- sdcontext: 4x1 -->
<grid nx="20" ny="20" nz="20"/>
 <!-- basis size: 1389 -->
 <!-- c dimensions: 1412x12   (353x12 blocks) -->
 <density_matrix form="diagonal" size="12">
 </density_matrix>
</slater_determinant>
</wavefunction>
<!-- BOSampleStepper:  fractional occupation not detected. -->
SlaterDet.resize:  new c dimensions = 1412x12   (353x12 blocks, local data size on pe 0 = 353x12) -->
SlaterDet.resize:  new c dimensions = 1412x12   (353x12 blocks, local data size on pe 0 = 353x12) -->
<iteration count="1">
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> 19.75362719 </eigenvalue_sum>
  <etotal_int scf_iter="0">     40.81808646 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> 1.69562547 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.17971350 ( using 0.17971350 ) -->
  <etotal_int scf_iter="1">      4.52275608 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.97439421 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.12168890 ( using 0.12168890 ) -->
  <etotal_int scf_iter="2">    -12.74654692 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -7.90756620 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.36913673 ( using 0.36913673 ) -->
  <etotal_int scf_iter="3">    -19.94059734 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -8.11464916 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.23727672 ( using 0.23727672 ) -->
  <etotal_int scf_iter="4">    -24.50712284 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -7.81750092 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.36769830 ( using 0.36769830 ) -->
  <etotal_int scf_iter="5">    -27.19139468 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -7.28558333 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.53731659 ( using 0.53731659 ) -->
  <etotal_int scf_iter="6">    -29.38637378 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -6.56031603 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.67318689 ( using 0.67318689 ) -->
  <etotal_int scf_iter="7">    -31.23515294 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.88779612 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.65944664 ( using 0.65944664 ) -->
  <etotal_int scf_iter="8">    -32.64400956 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.56809337 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.60337175 ( using 0.60337175 ) -->
  <etotal_int scf_iter="9">    -33.53334477 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.53197301 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.54398162 ( using 0.54398162 ) -->
  <etotal_int scf_iter="10">    -34.05195923 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.57246010 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.68749084 ( using 0.68749084 ) -->
  <etotal_int scf_iter="11">    -34.37287288 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.60619116 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.73362784 ( using 0.73362784 ) -->
  <etotal_int scf_iter="12">    -34.63200124 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.62402232 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.72873756 ( using 0.72873756 ) -->
  <etotal_int scf_iter="13">    -34.84599006 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.63309641 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.57930239 ( using 0.57930239 ) -->
  <etotal_int scf_iter="14">    -35.01644598 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.62577718 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.40779326 ( using 0.40779326 ) -->
  <etotal_int scf_iter="15">    -35.13786703 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.59859701 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.07153368 ( using 0.07153368 ) -->
  <etotal_int scf_iter="16">    -35.22213759 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.56982883 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = -1.04302613 ( using 0.00000000 ) -->
  <etotal_int scf_iter="17">    -35.26889902 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.54637863 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = -2.16980006 ( using 0.00000000 ) -->
  <etotal_int scf_iter="18">    -35.31044315 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.52423587 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = -2.59796157 ( using 0.00000000 ) -->
  <etotal_int scf_iter="19">    -35.35289842 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.50217304 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = -2.56388080 ( using 0.00000000 ) -->
  <etotal_int scf_iter="20">    -35.39631288 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.47968181 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = -2.03615411 ( using 0.00000000 ) -->
  <etotal_int scf_iter="21">    -35.44053491 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.45669687 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = -1.02089419 ( using 0.00000000 ) -->
  <etotal_int scf_iter="22">    -35.48525264 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.43343218 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.41771114 ( using 0.41771114 ) -->
  <etotal_int scf_iter="23">    -35.53003246 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.40060510 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.65825439 ( using 1.65825439 ) -->
  <etotal_int scf_iter="24">    -35.59267216 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.33079230 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.48076324 ( using 1.48076324 ) -->
  <etotal_int scf_iter="25">    -35.73035342 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.27746837 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.65831687 ( using 0.65831687 ) -->
  <etotal_int scf_iter="26">    -35.90832235 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.30520915 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.26688860 ( using 0.26688860 ) -->
  <etotal_int scf_iter="27">    -35.97674392 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.30349793 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.43387769 ( using 1.43387769 ) -->
  <etotal_int scf_iter="28">    -35.99042440 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.30445910 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.24393560 ( using 0.24393560 ) -->
  <etotal_int scf_iter="29">    -36.00217411 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.29593305 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.90995174 ( using 1.90995174 ) -->
  <etotal_int scf_iter="30">    -36.00500449 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.28391455 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.31934951 ( using 0.31934951 ) -->
  <etotal_int scf_iter="31">    -36.00854172 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.28004067 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.69402064 ( using 1.69402064 ) -->
  <etotal_int scf_iter="32">    -36.00964208 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.27532016 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.34434497 ( using 0.34434497 ) -->
  <etotal_int scf_iter="33">    -36.01087501 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.27332437 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.63128140 ( using 1.63128140 ) -->
  <etotal_int scf_iter="34">    -36.01133127 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26991127 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.35980439 ( using 0.35980439 ) -->
  <etotal_int scf_iter="35">    -36.01184181 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26808798 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.62639984 ( using 1.62639984 ) -->
  <etotal_int scf_iter="36">    -36.01205206 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26498772 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.37942803 ( using 0.37942803 ) -->
  <etotal_int scf_iter="37">    -36.01229634 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26365395 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.66769844 ( using 1.66769844 ) -->
  <etotal_int scf_iter="38">    -36.01240629 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26158964 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.40563829 ( using 0.40563829 ) -->
  <etotal_int scf_iter="39">    -36.01254335 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26086050 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.64138991 ( using 1.64138991 ) -->
  <etotal_int scf_iter="40">    -36.01260726 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.25989351 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.41806668 ( using 0.41806668 ) -->
  <etotal_int scf_iter="41">    -36.01268584 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.25965202 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.57017624 ( using 1.57017624 ) -->
  <etotal_int scf_iter="42">    -36.01272143 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.25947037 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.41715072 ( using 0.41715072 ) -->
  <etotal_int scf_iter="43">    -36.01276219 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.25954638 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.53217816 ( using 1.53217816 ) -->
  <etotal_int scf_iter="44">    -36.01278022 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.25981324 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.41938201 ( using 0.41938201 ) -->
  <etotal_int scf_iter="45">    -36.01280018 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26004374 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.54799792 ( using 1.54799792 ) -->
  <etotal_int scf_iter="46">    -36.01280936 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26049739 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.43158492 ( using 0.43158492 ) -->
  <etotal_int scf_iter="47">    -36.01281989 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26076294 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.56493086 ( using 1.56493086 ) -->
  <etotal_int scf_iter="48">    -36.01282504 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26122107 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.44356757 ( using 0.44356757 ) -->
  <etotal_int scf_iter="49">    -36.01283113 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26144535 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.54060221 ( using 1.54060221 ) -->
  <etotal_int scf_iter="50">    -36.01283412 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26179104 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.44511393 ( using 0.44511393 ) -->
  <etotal_int scf_iter="51">    -36.01283755 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26193196 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.49950395 ( using 1.49950395 ) -->
  <etotal_int scf_iter="52">    -36.01283918 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26212011 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.44037983 ( using 0.44037983 ) -->
  <etotal_int scf_iter="53">    -36.01284096 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26217497 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.49041026 ( using 1.49041026 ) -->
  <etotal_int scf_iter="54">    -36.01284181 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26222779 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.44304293 ( using 0.44304293 ) -->
  <etotal_int scf_iter="55">    -36.01284276 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26222274 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.52347093 ( using 1.52347093 ) -->
  <etotal_int scf_iter="56">    -36.01284325 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26219099 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.45922954 ( using 0.45922954 ) -->
  <etotal_int scf_iter="57">    -36.01284383 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26215516 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.54895895 ( using 1.54895895 ) -->
  <etotal_int scf_iter="58">    -36.01284414 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26208465 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.47615053 ( using 0.47615053 ) -->
  <etotal_int scf_iter="59">    -36.01284452 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26203919 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.51525327 ( using 1.51525327 ) -->
  <etotal_int scf_iter="60">    -36.01284472 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26196408 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.47636690 ( using 0.47636690 ) -->
  <etotal_int scf_iter="61">    -36.01284494 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26192440 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.45056438 ( using 1.45056438 ) -->
  <etotal_int scf_iter="62">    -36.01284505 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26186666 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.46411555 ( using 0.46411555 ) -->
  <etotal_int scf_iter="63">    -36.01284516 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26184093 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.42650627 ( using 1.42650627 ) -->
  <etotal_int scf_iter="64">    -36.01284522 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26180707 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.45982640 ( using 0.45982640 ) -->
  <etotal_int scf_iter="65">    -36.01284527 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26179473 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.46595982 ( using 1.46595982 ) -->
  <etotal_int scf_iter="66">    -36.01284530 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26178035 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.47418710 ( using 0.47418710 ) -->
  <etotal_int scf_iter="67">    -36.01284534 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26177715 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.51594575 ( using 1.51594575 ) -->
  <etotal_int scf_iter="68">    -36.01284536 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26177565 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.49543111 ( using 0.49543111 ) -->
  <etotal_int scf_iter="69">    -36.01284539 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26177793 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.50635710 ( using 1.50635710 ) -->
  <etotal_int scf_iter="70">    -36.01284540 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26178384 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.50238467 ( using 0.50238467 ) -->
  <etotal_int scf_iter="71">    -36.01284542 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26178887 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.44568396 ( using 1.44568396 ) -->
  <etotal_int scf_iter="72">    -36.01284542 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26179761 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.49319666 ( using 0.49319666 ) -->
  <etotal_int scf_iter="73">    -36.01284543 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26180304 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.40307609 ( using 1.40307609 ) -->
  <etotal_int scf_iter="74">    -36.01284544 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26181129 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.48508644 ( using 0.48508644 ) -->
  <etotal_int scf_iter="75">    -36.01284544 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26181568 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.41355610 ( using 1.41355610 ) -->
  <etotal_int scf_iter="76">    -36.01284545 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26182194 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.48966370 ( using 0.48966370 ) -->
  <etotal_int scf_iter="77">    -36.01284545 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26182490 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.45022891 ( using 1.45022891 ) -->
  <etotal_int scf_iter="78">    -36.01284545 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26182891 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.50289205 ( using 0.50289205 ) -->
  <etotal_int scf_iter="79">    -36.01284545 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183055 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.46646422 ( using 1.46646422 ) -->
  <etotal_int scf_iter="80">    -36.01284545 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183251 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.51401307 ( using 0.51401307 ) -->
  <etotal_int scf_iter="81">    -36.01284545 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183306 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.45071828 ( using 1.45071828 ) -->
  <etotal_int scf_iter="82">    -36.01284545 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183339 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.51885658 ( using 0.51885658 ) -->
  <etotal_int scf_iter="83">    -36.01284546 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183315 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.42522160 ( using 1.42522160 ) -->
  <etotal_int scf_iter="84">    -36.01284546 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183246 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.52012047 ( using 0.52012047 ) -->
  <etotal_int scf_iter="85">    -36.01284546 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183180 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 1.40536878 ( using 1.40536878 ) -->
  <etotal_int scf_iter="86">    -36.01284546 </etotal_int>
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <eigenvalue_sum> -5.26183069 </eigenvalue_sum>
  <!-- Anderson extrapolation: theta = 0.51904859 ( using 0.51904859 ) -->
  <etotal_int scf_iter="87">    -36.01284546 </etotal_int>
  <!-- BOSampleStepper: scf convergence at itscf = 88, scf energy varied by less than 1.00e-08 a.u. over 10 scf steps. -->
  <!-- total_electronic_charge: 24.00000000, spin = 0 -->
  <ekin>       25.55666342 </ekin>
  <econf>       0.00000000 </econf>
  <eps>       -18.93169757 </eps>
  <enl>         0.20262346 </enl>
  <ecoul>     -31.98675158 </ecoul>
  <exc>       -10.85368319 </exc>
  <evdw>        0.00000000 </evdw>
  <esr>         0.87241761 </esr>
  <eself>      33.68730789 </eself>
  <ets>         0.00000000 </ets>
  <etotal>    -36.01284546 </etotal>
<atomset>
<unit_cell 
    a=" 10.00000000   0.00000000   0.00000000"
    b="  0.00000000  10.00000000   0.00000000"
    c="  0.00000000   0.00000000  10.00000000" />
  <atom name="C0" species="C">
    <position> -2.17711378 0.98364591 0.50207378 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> 0.00683851 0.01453245 -0.00759700 </force>
  </atom>
  <atom name="C1" species="C">
    <position> 0.02372740 -0.20245014 -0.62108306 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> 0.03580040 0.00164571 0.03010417 </force>
  </atom>
  <atom name="C2" species="C">
    <position> 2.57564380 -0.17640026 0.62507227 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> -0.04641163 -0.00936487 -0.01582998 </force>
  </atom>
  <atom name="H3" species="H">
    <position> -2.01445750 1.92706900 2.31732390 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> 0.00151668 0.00634851 0.01231919 </force>
  </atom>
  <atom name="H4" species="H">
    <position> -3.71137865 1.65425869 -0.68450227 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> 0.00555358 0.00713578 -0.00982486 </force>
  </atom>
  <atom name="H5" species="H">
    <position> 0.04851494 -0.40575632 -2.66312300 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> 0.00095572 -0.00068895 -0.02504200 </force>
  </atom>
  <atom name="H6" species="H">
    <position> 3.58157147 -1.92706900 0.23695465 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> 0.01007187 -0.01023479 -0.00317694 </force>
  </atom>
  <atom name="H7" species="H">
    <position> 3.71137865 1.38524673 -0.08070264 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> -0.00218385 0.00937218 -0.00298577 </force>
  </atom>
  <atom name="H8" species="H">
    <position> 2.38292575 0.01417673 2.66312300 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> -0.00577409 0.00177842 0.01626369 </force>
  </atom>
  <atom name="O9" species="O">
    <position> -1.85732677 -1.64626326 0.56178156 </position>
    <velocity> 0.00000000 0.00000000 0.00000000 </velocity>
    <force> -0.00659177 -0.02064652 0.00603437 </force>
  </atom>
</atomset>
<timing where="run"                name=" iteration"       min="2.554    " max="2.554    " count="1        "/>
</iteration>
<!-- memory nlp.twnl    :   13.204 MB  (3.356 MB local) -->
<!-- memory sd.psi      :    0.254 MB  (0.065 MB local) -->
<!-- memory sd.hpsi     :    0.254 MB  (0.065 MB local) -->
<!-- memory cd.rhor     :    0.488 MB  (0.122 MB local) -->
<!-- memory cd.rhog     :    0.169 MB  (0.042 MB local) -->
<!-- memory total       :   14.370 MB  (3.649 MB local) -->
</run>
<!-- [qball]  -->
<!-- end of command stream -->
<real_time> 3.814 </real_time>
<end_time> 2018-05-18T01:44:31Z </end_time>
</qbox:simulation>
